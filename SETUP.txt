SETUP GUIDE FOR CHATBOT-BEST
=========================

1. PREREQUISITES
--------------
- Python 3.9+ installed on your system
- Visual Studio Code with Python extension installed
- Git (optional, for version control)

2. SETUP IN VSCODE
-----------------
- Open VSCode
- Click on "File" > "Open Folder..." or use Ctrl+K Ctrl+O
- Navigate to where you want to create your project
- If you have the project files already:
  * Select the folder containing the project files
- If starting from scratch:
  * Create a new folder named 'ChatBot-BEST'
  * Open terminal in VSCode (Ctrl+`)
  * Clone the repository (if using Git):
    git clone https://github.com/yourusername/ChatBot-BEST.git .

3. VIRTUAL ENVIRONMENT SETUP
---------------------------
- In VSCode's integrated terminal:
  * Create a virtual environment:
    python -m venv venv
  * Activate the virtual environment:
    On Windows: .\venv\Scripts\activate
    On macOS/Linux: source venv/bin/activate
  * VSCode might ask to select this environment - click "Yes"

4. INSTALL DEPENDENCIES
----------------------
- With the virtual environment activated:
  * Install required packages:
    pip install -r requirements.txt
  * If requirements.txt doesn't exist or is incomplete, install:
    pip install fastapi uvicorn python-dotenv numpy pandas scikit-learn sentence-transformers httpx aiohttp

5. RUNNING THE APPLICATION
-------------------------
- Make sure your virtual environment is activated
- In the VSCode terminal, run:
  python -m app.main
- Alternatively, run:
  python -m uvicorn app.main:app --reload --host 0.0.0.0 --port 8000
- The application will be available at: http://localhost:8000

6. DEBUGGING IN VSCODE
--------------------
- Click on the "Run and Debug" icon in the side panel (Ctrl+Shift+D)
- Click "create a launch.json file" > "Python" > "FastAPI"
- In the generated launch.json, ensure it points to your app.main:app
- Use the green "Play" button to start the application in debug mode

7. CODE STRUCTURE
---------------
- app/
  * main.py - FastAPI application entry point
  * api/ - API endpoints
  * data/ - Data files including vector database
  * models/ - Data models
  * services/ - Business logic
  * static/ - Static assets (CSS, JS)
  * templates/ - HTML templates
  * utils/ - Utility functions and classes

8. TROUBLESHOOTING
-----------------
- If modules can't be found:
  * Ensure you're using the correct Python interpreter (virtual environment)
  * Check in VSCode's status bar if "Python" shows your venv
- If the server won't start:
  * Ensure no other application is using port 8000
  * Try changing the port: --port 8001
- If dependencies fail to install:
  * Upgrade pip: python -m pip install --upgrade pip
  * Install individually to identify problematic packages

9. USEFUL VSCODE EXTENSIONS
-------------------------
- Python (Microsoft) - Python language support
- Pylance - Python language server
- Python Indent - Correct indentation
- autoDocstring - Documentation generation
- GitLens - Git integration

=========================
End of Setup Guide 